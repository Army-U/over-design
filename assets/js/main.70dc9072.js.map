{"version":3,"sources":["webpack://example/./src/pages/hello-world/slice.tsx","webpack://example/./src/common/store.tsx","webpack://example/./src/pages/hello-world/index.tsx","webpack://example/./src/index.tsx"],"names":["getNewText","createAsyncThunk","template","dispatch","then","r","setTimeout","setText","Math","random","slice","createSlice","name","initialState","text","loading","reducers","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","middlewares","store","configureStore","middleware","getDefaultMiddleware","concat","devTools","process","reducer","helloWorld","helloWorldSlice","HelloWorld","useDispatch","useSelector","useEffect","className","css","ReactDOM","document","querySelector"],"mappings":"ufASO,IAAMA,GAAaC,QAMxB,aANwC,4CAM1B,WAAOC,EAAP,iGAAmBC,EAAnB,EAAmBA,SAAnB,SAER,CAAEC,KAAM,SAACC,GAAD,OAAOC,WAAWD,EAAG,OAFrB,OAIdF,EAASI,EAAQ,WAAD,OAAYC,KAAKC,YAJnB,2CAN0B,yDAa7BC,GAAQC,QAAY,CAC/BC,KAAM,aACNC,aAAc,CACZC,KAAM,GACNC,SAAS,GAEXC,SAAU,CACRT,QAAS,SAACU,EAAOC,GACfD,EAAMH,KAAOI,EAAOC,UAGxBC,cAAe,SAACC,GACdA,EACGC,QAAQtB,EAAWuB,SAAS,SAACN,GAC5BA,EAAMF,SAAU,KAEjBO,QAAQtB,EAAWwB,WAAW,SAACP,GAC9BA,EAAMF,SAAU,KAEjBO,QAAQtB,EAAWyB,UAAU,SAACR,GAC7BA,EAAMF,SAAU,QAKTR,EAAYG,EAAMgB,QAAlBnB,QACf,EAAeG,EAAf,QC1CMiB,EAA4B,GAS5BC,GAAQC,QAAe,CAC3BC,WAAY,SAACC,GAAD,OAA0BA,IAAuBC,OAAOL,IACpEM,UAAUC,EACVC,QAAS,CACPC,WAAYC,KAIhB,I,oBCjBe,SAASC,IACtB,IAAMnC,GAAWoC,UACXH,GAAaI,SAAY,SAACvB,GAAD,OAAsBA,EAAMmB,cAI3D,OAHAK,gBAAU,WACRtC,EAASH,OACR,KAED,aACE0C,WAAWC,QAAF,2EADX,SAOGP,EAAWrB,QAAU,aAAeqB,EAAWtB,OCbtD8B,UACE,QAAC,KAAD,CAAUhB,MAAOA,EAAjB,UACE,QAACU,EAAD,MAEFO,SAASC,cAAc,Y","file":"assets/js/main.70dc9072.js","sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\n\nimport store from 'src/common/store';\n\nexport interface SliceState {\n  text: string;\n  loading: boolean;\n}\n\nexport const getNewText = createAsyncThunk<\n  void,\n  void,\n  {\n    state: ReturnType<typeof store.getState>;\n  }\n>('getNewText', async (template, { dispatch }) => {\n  // @ts-ignore\n  await { then: (r) => setTimeout(r, 1000) };\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  dispatch(setText(`Random: ${Math.random()}`));\n});\n\nexport const slice = createSlice({\n  name: 'helloWorld',\n  initialState: {\n    text: '',\n    loading: false,\n  } as SliceState,\n  reducers: {\n    setText: (state, action: PayloadAction<string>) => {\n      state.text = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getNewText.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(getNewText.fulfilled, (state) => {\n        state.loading = false;\n      })\n      .addCase(getNewText.rejected, (state) => {\n        state.loading = false;\n      });\n  },\n});\n\nexport const { setText } = slice.actions;\nexport default slice.reducer;\n","/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable global-require */\nimport { configureStore, Middleware } from '@reduxjs/toolkit';\n\nimport helloWorldSlice from 'src/pages/hello-world/slice';\n\nconst middlewares: Middleware[] = [];\n\n/* istanbul ignore if */\nif (process.env.NODE_ENV === 'development') {\n  const { createLogger } = require('redux-logger');\n  const logger = createLogger({ collapsed: true });\n  middlewares.push(logger);\n}\n\nconst store = configureStore({\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(middlewares),\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    helloWorld: helloWorldSlice,\n  },\n});\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { css } from '@emotion/css';\nimport { RootState } from 'src/common/store';\nimport { getNewText } from './slice';\n\nexport default function HelloWorld() {\n  const dispatch = useDispatch();\n  const helloWorld = useSelector((state: RootState) => state.helloWorld);\n  useEffect(() => {\n    dispatch(getNewText());\n  }, []);\n  return (\n    <p\n      className={css`\n        margin-top: 25%;\n        text-align: center;\n        font-size: 18px;\n      `}\n    >\n      {helloWorld.loading ? 'Loading...' : helloWorld.text}\n    </p>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from 'src/common/store';\n\nimport HelloWorld from 'src/pages/hello-world';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HelloWorld />\n  </Provider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}