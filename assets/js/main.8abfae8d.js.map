{"version":3,"sources":["webpack://example/./src/pages/hello-world/slice.tsx","webpack://example/./src/common/store.tsx","webpack://example/./src/common/query.tsx","webpack://example/./src/index.tsx"],"names":["slice","createSlice","name","initialState","record","reducers","setRecord","state","action","payload","actions","reducer","middlewares","process","store","configureStore","middleware","getDefaultMiddleware","concat","devTools","helloWorld","helloWorldSlice","useAppDispatch","useDispatch","queryClient","QueryClient","defaultOptions","queries","refetchOnWindowFocus","retry","i18n","initReactI18next","use","LanguageDetector","HttpApi","init","debug","fallbackLng","load","interpolation","escapeValue","backend","loadPath","HelloWorld","React","DataURL","ReactDOM","document","querySelector"],"mappings":"2QAMaA,EAAQC,SAAY,CAC/BC,KAAM,aACNC,aAAc,CACZC,OAAQ,IAEVC,SAAU,CACRC,UAAW,SAACC,EAAOC,EAAgD,CACjED,EAAMH,OAASI,EAAOC,YAKbH,EAAcN,EAAMU,QAApBJ,UACf,EAAeN,EAAMW,QCbfC,EAA4B,GAGlC,GAAIC,GAAwC,UAM5C,GAAMC,GAAQC,SAAe,CAC3BC,WAAY,SAACC,EAAD,OAA0BA,KAAuBC,OAAON,IACpEO,SAAUN,GACVF,QAAS,CACPS,WAAYC,KAIhB,EAAeP,EAKFQ,EAAiB,UAAG,CAAH,MAAMC,gB,UC1BvBC,EAAc,GAAIC,eAAY,CACzCC,eAAgB,CACdC,QAAS,CACPC,qBAAsB,GACtBC,MAAO,O,UCMbC,SACOC,MACJC,IAAIC,KACJD,IAAIE,KACJC,KAAK,CACJC,MAAO,GACPC,YAAa,KACbC,KAAM,cAENC,cAAe,CACbC,YAAa,IAGfC,QAAS,CACPC,SAAU,8CAIhB,GAAMC,GAAaC,OAAW,iBAAM,yDAC9BC,EAAUD,OAAW,iBAAM,iCAEjCE,SACE,UAAC,aAAD,UACE,UAAC,KAAD,CAAU,MAAOhC,EAAjB,SACE,UAAC,sBAAD,CAAqB,OAAQU,EAA7B,SACE,UAAC,WAAD,CAAgB,SAAS,aAAzB,SACE,WAAC,KAAD,WACE,0BACE,2BACE,yBACE,UAAC,KAAD,CAAM,GAAG,gBAAT,oBAEF,yBACE,UAAC,KAAD,CAAM,GAAG,wBAAT,6BAIN,WAAC,KAAD,WACE,UAAC,KAAD,CAAO,KAAK,gBAAgB,QAAS,UAAC,EAAD,MACrC,UAAC,KAAD,CAAO,KAAK,wBAAwB,QAAS,UAAC,EAAD,oBAOzDuB,SAASC,cAAc,Y","file":"assets/js/main.8abfae8d.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface SliceState {\n  record: Record<string, any>;\n}\n\nexport const slice = createSlice({\n  name: 'helloWorld',\n  initialState: {\n    record: {},\n  } as SliceState,\n  reducers: {\n    setRecord: (state, action: PayloadAction<SliceState['record']>) => {\n      state.record = action.payload;\n    },\n  },\n});\n\nexport const { setRecord } = slice.actions;\nexport default slice.reducer;\n","/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable global-require */\nimport { configureStore, Middleware } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport helloWorldSlice from 'src/pages/hello-world/slice';\n\nconst middlewares: Middleware[] = [];\n\n/* istanbul ignore if */\nif (process.env.NODE_ENV === 'development') {\n  const { createLogger } = require('redux-logger');\n  const logger = createLogger({ collapsed: true });\n  middlewares.push(logger);\n}\n\nconst store = configureStore({\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(middlewares),\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    helloWorld: helloWorldSlice,\n  },\n});\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import { QueryClient } from 'react-query';\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false,\n      retry: false,\n    },\n  },\n});\n","import i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport HttpApi from 'i18next-http-backend';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { initReactI18next } from 'react-i18next';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter, Routes, Route, Link } from 'react-router-dom';\nimport store from 'src/common/store';\nimport { QueryClientProvider } from 'react-query';\nimport { queryClient } from './common/query';\n\ni18n\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  .use(HttpApi)\n  .init({\n    debug: true,\n    fallbackLng: 'en',\n    load: 'currentOnly',\n\n    interpolation: {\n      escapeValue: false,\n    },\n\n    backend: {\n      loadPath: '/over-design/locales/{{lng}}/{{ns}}.json',\n    },\n  });\n\nconst HelloWorld = React.lazy(() => import('src/pages/hello-world'));\nconst DataURL = React.lazy(() => import('src/pages/data-url'));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <QueryClientProvider client={queryClient}>\n        <React.Suspense fallback=\"Loading...\">\n          <BrowserRouter>\n            <nav>\n              <ol>\n                <li>\n                  <Link to=\"/over-design/\">Main</Link>\n                </li>\n                <li>\n                  <Link to=\"/over-design/data-url\">Data URL</Link>\n                </li>\n              </ol>\n            </nav>\n            <Routes>\n              <Route path=\"/over-design/\" element={<HelloWorld />} />\n              <Route path=\"/over-design/data-url\" element={<DataURL />} />\n            </Routes>\n          </BrowserRouter>\n        </React.Suspense>\n      </QueryClientProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}