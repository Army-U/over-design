{"version":3,"sources":["webpack://example/src/pages/hello-world/index.tsx"],"names":["helloWorldAPI","useGetASuccessAPIQueryLoading","isLoading","__disableNotification","error","useGetAFailedAPIQueryLoading","history","useHistory","useTranslation","t","data","failedError","searchString","Math","location"],"mappings":"8XAUe,YAAsB,OACnC,EAA2DA,8BAArD,EAAN,EAAM,KAAmBC,EAAzB,EAAcC,UACd,EACE,2BAA2E,CACzEC,sBAAuB,KAFrB,EAAN,EAAQC,MAA+BC,EAAvC,EAA4BH,UAItBI,EAAUC,WAChB,EAAcC,UAANC,EAAR,EAAQA,EAER,MACE,kBACE,UADF,oBAcE,eACE,MACE,iCACGA,EAAD,0BADF,IACgC,IAC7BR,EAAgCQ,aAAH,MAA0BC,GAA1B,YAA0BA,EAAxD,iBAKN,eACE,MACE,iCACGD,EAAD,yBADF,IAC+B,IAC5BJ,EAA+BI,aAAH,MAA0BE,GAA1B,SAA0BA,UAA1B,wBAA0BA,EAAvD,iBAKN,eACE,QAAS,UAAM,CACb,GAAMC,GAAe,GAArB,iBACAA,aAAyBC,cAAzBD,YACAN,OAAaQ,sBAA0BF,EAAvCN,aAEF,UANF,GAOE,MAAO,+BAAGG,EAPZ,qB","file":"assets/js/826.b2a2d597.chunk.js","sourcesContent":["import { css } from '@linaria/core';\nimport { Chip } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport { useHistory } from 'react-router-dom';\nimport { helloWorldAPI } from './slice';\n\ninterface RequestError {\n  error: { status: number; data: { description: string } };\n}\n\nexport default function HelloWorld() {\n  const { data, isLoading: useGetASuccessAPIQueryLoading } = helloWorldAPI.useGetASuccessAPIQuery();\n  const { error: failedError, isLoading: useGetAFailedAPIQueryLoading } =\n    helloWorldAPI.useGetAFailedAPIQuery<RequestError & { isLoading: boolean }>({\n      __disableNotification: true,\n    });\n  const history = useHistory();\n  const { t } = useTranslation();\n\n  return (\n    <div\n      className={css`\n        height: 100%;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n        font-size: 18px;\n\n        div {\n          margin-bottom: 20px;\n        }\n      `}\n    >\n      <Chip\n        label={\n          <>\n            {t('useGetASuccessAPIQuery')}:{' '}\n            {useGetASuccessAPIQueryLoading ? t('Loading') + '...' : data?.description}\n          </>\n        }\n      ></Chip>\n\n      <Chip\n        label={\n          <>\n            {t('useGetAFailedAPIQuery')}:{' '}\n            {useGetAFailedAPIQueryLoading ? t('Loading') + '...' : failedError?.data?.description}\n          </>\n        }\n      ></Chip>\n\n      <Chip\n        onClick={() => {\n          const searchString = new URLSearchParams();\n          searchString.append('s', Math.random().toString());\n          history.push(location.pathname + '?' + searchString.toString());\n        }}\n        clickable\n        label={<>{t('useHistory')}</>}\n      />\n    </div>\n  );\n}\n"],"sourceRoot":""}