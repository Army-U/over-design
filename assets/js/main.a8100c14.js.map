{"version":3,"sources":["webpack://example/./src/pages/hello-world/slice.tsx","webpack://example/./src/common/store.tsx","webpack://example/src/pages/hello-world/index.tsx","webpack://example/./src/index.tsx"],"names":["axiosBaseQuery","baseUrl","url","method","data","__disableNotification","axios","result","error","alert","response","message","status","helloWorldAPI","createApi","reducerPath","baseQuery","endpoints","build","getASuccessAPI","query","getAFailedAPI","slice","createSlice","name","initialState","json","loading","reducers","setJSON","state","action","payload","extraReducers","actions","middlewares","middleware","store","configureStore","getDefaultMiddleware","concat","devTools","process","reducer","helloWorld","helloWorldSlice","HelloWorld","useGetASuccessAPIQuery","useGetASuccessAPIQueryLoading","isLoading","useGetAFailedAPIQuery","useGetAFailedAPIQueryLoading","className","failedError","ReactDOM","document","querySelector"],"mappings":"6jBAKA,IAAMA,EACJ,wEACqC,CAAEC,QAAS,IAA5CA,EADJ,EACIA,QADJ,mDAYA,gIAASC,EAAT,EAASA,IAAKC,EAAd,EAAcA,OAAQC,EAAtB,EAAsBA,KAAMC,EAA5B,EAA4BA,sBAA5B,kBAEyBC,IAAM,CAAEJ,IAAKD,EAAUC,EAAKC,SAAQC,SAF7D,cAEUG,EAFV,yBAGW,CAAEH,KAAMG,EAAOH,OAH1B,0CAKUI,EALV,KAMQH,GACFI,MAAK,oBAACD,EAAME,gBAAP,iBAAC,EAAgBN,YAAjB,aAAC,EAAsBO,eAAvB,QAAkC,qBAP7C,kBAUW,CACLH,MAAO,CAAEI,OAAM,UAAEJ,EAAME,gBAAR,aAAE,EAAgBE,OAAQR,KAAI,UAAEI,EAAME,gBAAR,aAAE,EAAgBN,QAXrE,yDAZA,uDA4BWS,GAAgBC,QAAU,CACrCC,YAAa,gBACbC,UAAWhB,EAAe,CACxBC,QAAS,wBAEXgB,UAAW,SAACC,GAAD,MAAY,CACrBC,eAAgBD,EAAME,MAAmD,CACvEA,MAAO,iBAAO,CACZlB,IAAK,WAGTmB,cAAeH,EAAME,MAGnB,CACAA,MAAO,iBAAO,CACZlB,IAAK,eAWAoB,GAAQC,QAAY,CAC/BC,KAAM,aACNC,aAAc,CACZC,KAAM,GACNC,SAAS,GAEXC,SAAU,CACRC,QAAS,SAACC,EAAOC,GACfD,EAAMJ,KAAOK,EAAOC,UAGxBC,cAAe,eAIjB,GAD2BX,EAAMY,QAAlBL,QACAP,EAAf,S,wHCtEA,IAAMa,EAA4B,CAACtB,EAAcuB,YAS3CC,GAAQC,QAAe,CAC3BF,WAAY,SAACG,GAAD,OAA0BA,IAAuBC,OAAOL,IACpEM,UAAUC,EACVC,QAAS,EAAF,CACLC,WAAYC,GACXhC,EAAcE,YAAcF,EAAc8B,WAI/C,I,4BCjBe,SAASG,IAAa,MACnC,EAA2DjC,EAAckC,yBAAnE,EAAN,EAAM,KAAmBC,EAAzB,EAAcC,UACd,EACEpC,EAAcqC,sBAA6D,CACzE7C,uBAAuB,IAFrB,EAAN,EAAQG,MAA+B2C,EAAvC,EAA4BF,UAK5B,OACE,iBACEG,UADF,qBAWE,oDAC2BJ,EAAgC,aAAH,OAAkB5C,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAhD,gBAG1B,kDACwB,IACrB+C,EAA+B,aAAH,OAAkBE,QAAlB,IAAkBA,GAAlB,UAAkBA,cAAlB,aAAkBA,EAA/C,kB,QCzBRC,UACE,SAAC,KAAD,CAAUjB,MAAOA,EAAjB,UACE,SAACS,EAAD,MAEFS,SAASC,cAAc,Y","file":"assets/js/main.a8100c14.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { BaseQueryFn, createApi } from '@reduxjs/toolkit/query/react';\nimport axios, { AxiosError, AxiosRequestConfig } from 'axios';\n\n// https://redux-toolkit.js.org/rtk-query/usage/customizing-queries#axios-basequery\nconst axiosBaseQuery =\n  (\n    { baseUrl }: { baseUrl: string } = { baseUrl: '' },\n  ): BaseQueryFn<\n    {\n      url: string;\n      method?: AxiosRequestConfig['method'];\n      data?: AxiosRequestConfig['data'];\n      __disableNotification?: boolean;\n    },\n    unknown,\n    unknown\n  > =>\n  async ({ url, method, data, __disableNotification }) => {\n    try {\n      const result = await axios({ url: baseUrl + url, method, data });\n      return { data: result.data };\n    } catch (axiosError) {\n      const error = axiosError as AxiosError;\n      if (__disableNotification) {\n        alert(error.response?.data?.message ?? 'Operation failed.');\n      }\n\n      return {\n        error: { status: error.response?.status, data: error.response?.data },\n      };\n    }\n  };\n\nexport const helloWorldAPI = createApi({\n  reducerPath: 'helloWorldAPI',\n  baseQuery: axiosBaseQuery({\n    baseUrl: 'https://httpstat.us',\n  }),\n  endpoints: (build) => ({\n    getASuccessAPI: build.query<{ code: number; description: string }, void>({\n      query: () => ({\n        url: '/200',\n      }),\n    }),\n    getAFailedAPI: build.query<\n      { code: number; description: string },\n      { __disableNotification?: boolean }\n    >({\n      query: () => ({\n        url: '/400',\n      }),\n    }),\n  }),\n});\n\nexport interface SliceState {\n  json: Record<string, any>;\n  loading: boolean;\n}\n\nexport const slice = createSlice({\n  name: 'helloWorld',\n  initialState: {\n    json: {},\n    loading: false,\n  } as SliceState,\n  reducers: {\n    setJSON: (state, action: PayloadAction<Record<string, any>>) => {\n      state.json = action.payload;\n    },\n  },\n  extraReducers: () => {},\n});\n\nexport const { setJSON } = slice.actions;\nexport default slice.reducer;\n","/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable global-require */\nimport { configureStore, Middleware } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport helloWorldSlice, { helloWorldAPI } from 'src/pages/hello-world/slice';\n\nconst middlewares: Middleware[] = [helloWorldAPI.middleware];\n\n/* istanbul ignore if */\nif (process.env.NODE_ENV === 'development') {\n  const { createLogger } = require('redux-logger');\n  const logger = createLogger({ collapsed: true });\n  middlewares.push(logger);\n}\n\nconst store = configureStore({\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(middlewares),\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    helloWorld: helloWorldSlice,\n    [helloWorldAPI.reducerPath]: helloWorldAPI.reducer,\n  },\n});\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import { css } from '@linaria/core';\nimport { helloWorldAPI } from './slice';\n\ninterface RequestError {\n  error: { status: number; data: { description: string } };\n}\n\nexport default function HelloWorld() {\n  const { data, isLoading: useGetASuccessAPIQueryLoading } = helloWorldAPI.useGetASuccessAPIQuery();\n  const { error: failedError, isLoading: useGetAFailedAPIQueryLoading } =\n    helloWorldAPI.useGetAFailedAPIQuery<RequestError & { isLoading: boolean }>({\n      __disableNotification: true,\n    });\n\n  return (\n    <div\n      className={css`\n        width: 100%;\n        height: 100%;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n        font-size: 18px;\n      `}\n    >\n      <p>\n        useGetASuccessAPIQuery: {useGetASuccessAPIQueryLoading ? 'Loading...' : data?.description}\n      </p>\n\n      <p>\n        useGetAFailedAPIQuery:{' '}\n        {useGetAFailedAPIQueryLoading ? 'Loading...' : failedError?.data?.description}\n      </p>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from 'src/common/store';\n\nimport HelloWorld from 'src/pages/hello-world';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HelloWorld />\n  </Provider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}