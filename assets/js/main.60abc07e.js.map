{"version":3,"sources":["webpack://example/./src/pages/hello-world/slice.tsx","webpack://example/./src/common/store.tsx","webpack://example/./src/pages/hello-world/index.tsx","webpack://example/./src/index.tsx"],"names":["getNewText","createAsyncThunk","template","dispatch","then","r","setTimeout","setText","Math","random","slice","createSlice","name","initialState","text","loading","reducers","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer","middlewares","process","store","configureStore","middleware","getDefaultMiddleware","concat","devTools","helloWorld","helloWorldSlice","HelloWorld","useDispatch","useSelector","useEffect","css","ReactDOM","document","querySelector"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AASO,IAAMA,UAAU,GAAGC,8CAAgB,CAMxC,YANwC;AAAA,sEAM1B,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmBC,oBAAnB,QAAmBA,QAAnB;AAAA;AAAA,mBAER;AAAEC,kBAAI,EAAE,cAACC,CAAD;AAAA,uBAAOC,UAAU,CAACD,CAAD,EAAI,IAAJ,CAAjB;AAAA;AAAR,aAFQ;;AAAA;AAGd;AACAF,oBAAQ,CAACI,OAAO,mBAAYC,IAAI,CAACC,MAAL,EAAZ,EAAR,CAAR;;AAJc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAN0B;;AAAA;AAAA;AAAA;AAAA,IAAnC;AAaA,IAAMC,KAAK,GAAGC,yCAAW,CAAC;AAC/BC,MAAI,EAAE,YADyB;AAE/BC,cAAY,EAAE;AACZC,QAAI,EAAE,EADM;AAEZC,WAAO,EAAE;AAFG,GAFiB;AAM/BC,UAAQ,EAAE;AACRT,WAAO,EAAE,iBAACU,KAAD,EAAQC,MAAR,EAA0C;AACjDD,WAAK,CAACH,IAAN,GAAaI,MAAM,CAACC,OAApB;AACD;AAHO,GANqB;AAW/BC,eAAa,EAAE,uBAACC,OAAD,EAAa;AAC1BA,WAAO,CACJC,OADH,CACWtB,UAAU,CAACuB,OADtB,EAC+B,UAACN,KAAD,EAAW;AACtCA,WAAK,CAACF,OAAN,GAAgB,IAAhB;AACD,KAHH,EAIGO,OAJH,CAIWtB,UAAU,CAACwB,SAJtB,EAIiC,UAACP,KAAD,EAAW;AACxCA,WAAK,CAACF,OAAN,GAAgB,KAAhB;AACD,KANH,EAOGO,OAPH,CAOWtB,UAAU,CAACyB,QAPtB,EAOgC,UAACR,KAAD,EAAW;AACvCA,WAAK,CAACF,OAAN,GAAgB,KAAhB;AACD,KATH;AAUD;AAtB8B,CAAD,CAAzB;AAyBA,IAAQR,OAAR,GAAoBG,KAAK,CAACgB,OAA1B,CAAQnB,OAAR;;AACP,sDAAeG,KAAK,CAACiB,OAArB,E;;;;AChDA;;AACA;AACA;AAEA;AAEA,IAAMC,WAAyB,GAAG,EAAlC;AAEA;;AACA,IAAIC,KAAJ,EAA4C,uCAI3C;;AAED,IAAMC,KAAK,GAAGC,4CAAc,CAAC;AAC3BC,YAAU,EAAE,oBAACC,oBAAD;AAAA,WAA0BA,oBAAoB,GAAGC,MAAvB,CAA8BN,WAA9B,CAA1B;AAAA,GADe;AAE3BO,UAAQ,EAAEN,YAAA,KAAyB,YAFR;AAG3BF,SAAO,EAAE;AACPS,cAAU,EAAEC,iBAAeA;AADpB;AAHkB,CAAD,CAA5B;AAQA,iDAAeP,KAAf,E;;;;;;;;ACvBA;AACA;AACA;AAEA;;AAEe,SAASQ,UAAT,GAAsB;AACnC,MAAMnC,QAAQ,GAAGoC,0BAAW,EAA5B;AACA,MAAMH,UAAU,GAAGI,0BAAW,CAAC,UAACvB,KAAD;AAAA,WAAsBA,KAAK,CAACmB,UAA5B;AAAA,GAAD,CAA9B;AACAK,qBAAS,CAAC,YAAM;AACdtC,YAAQ,CAACH,UAAU,EAAX,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;AAGA,SACE;AACE,aAAS,eAAE0C,+BAAF;AAAA;AAAA;AAAA,UADX;AAAA,cAOGN,UAAU,CAACrB,OAAX,GAAqB,YAArB,GAAoCqB,UAAU,CAACtB;AAPlD,IADF;AAWD,C;;ACvBD;AACA;AACA;AACA;AAEA;;AAEA6B,gBAAA,CACE,sDAAC,mBAAD;AAAU,OAAK,EAAEb,YAAjB;AAAA,YACE,sDAAC,UAAD;AADF,EADF,EAIEc,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAJF,E","file":"assets/js/main.60abc07e.js","sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\n\nimport store from 'src/common/store';\n\nexport interface SliceState {\n  text: string;\n  loading: boolean;\n}\n\nexport const getNewText = createAsyncThunk<\n  void,\n  void,\n  {\n    state: ReturnType<typeof store.getState>;\n  }\n>('getNewText', async (template, { dispatch }) => {\n  // @ts-ignore\n  await { then: (r) => setTimeout(r, 1000) };\n  // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  dispatch(setText(`Random: ${Math.random()}`));\n});\n\nexport const slice = createSlice({\n  name: 'helloWorld',\n  initialState: {\n    text: '',\n    loading: false,\n  } as SliceState,\n  reducers: {\n    setText: (state, action: PayloadAction<string>) => {\n      state.text = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getNewText.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(getNewText.fulfilled, (state) => {\n        state.loading = false;\n      })\n      .addCase(getNewText.rejected, (state) => {\n        state.loading = false;\n      });\n  },\n});\n\nexport const { setText } = slice.actions;\nexport default slice.reducer;\n","/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable global-require */\nimport { configureStore, Middleware } from '@reduxjs/toolkit';\n\nimport helloWorldSlice from 'src/pages/hello-world/slice';\n\nconst middlewares: Middleware[] = [];\n\n/* istanbul ignore if */\nif (process.env.NODE_ENV === 'development') {\n  const { createLogger } = require('redux-logger');\n  const logger = createLogger({ collapsed: true });\n  middlewares.push(logger);\n}\n\nconst store = configureStore({\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(middlewares),\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    helloWorld: helloWorldSlice,\n  },\n});\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { css } from '@emotion/css';\nimport { RootState } from 'src/common/store';\nimport { getNewText } from './slice';\n\nexport default function HelloWorld() {\n  const dispatch = useDispatch();\n  const helloWorld = useSelector((state: RootState) => state.helloWorld);\n  useEffect(() => {\n    dispatch(getNewText());\n  }, []);\n  return (\n    <p\n      className={css`\n        margin-top: 25%;\n        text-align: center;\n        font-size: 18px;\n      `}\n    >\n      {helloWorld.loading ? 'Loading...' : helloWorld.text}\n    </p>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from 'src/common/store';\n\nimport HelloWorld from 'src/pages/hello-world';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HelloWorld />\n  </Provider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}