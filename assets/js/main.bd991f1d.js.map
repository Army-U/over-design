{"version":3,"sources":["webpack://example/./src/common/store.tsx","webpack://example/./src/index.tsx","webpack://example/./src/pages/hello-world/slice.tsx"],"names":["middlewares","helloWorldAPI","process","store","configureStore","middleware","getDefaultMiddleware","concat","devTools","reducer","helloWorld","helloWorldSlice","useAppDispatch","useDispatch","i18n","initReactI18next","use","LanguageDetector","HttpApi","init","debug","fallbackLng","load","interpolation","escapeValue","backend","loadPath","HelloWorld","React","ReactDOM","document","querySelector","axiosBaseQuery","baseUrl","url","method","data","__disableNotification","axios","result","error","alert","response","message","status","createApi","reducerPath","baseQuery","endpoints","build","getASuccessAPI","query","getAFailedAPI","slice","createSlice","name","initialState","json","loading","reducers","setJSON","state","action","payload","extraReducers","actions"],"mappings":"kYAMA,GAAMA,GAA4B,CAACC,iBAGnC,GAAIC,GAAwC,UAM5C,GAAMC,GAAQC,SAAe,CAC3BC,WAAY,SAACC,EAAD,OAA0BA,KAAuBC,OAAOP,IACpEQ,SAAUN,GACVO,QAAS,EAAF,CACLC,WAAYC,MACXV,iBAA4BA,gBAIjC,EAAeE,EAKFS,EAAiB,UAAG,CAAH,MAAMC,gB,UCnBpCC,QACOC,MACJC,IAAIC,KACJD,IAAIE,KACJC,KAAK,CACJC,MAAO,GACPC,YAAa,KACbC,KAAM,cAENC,cAAe,CACbC,YAAa,IAGfC,QAAS,CACPC,SAAU,8CAIhB,GAAMC,GAAaC,OAAW,iBAAM,wDAEpCC,SACE,UAAC,aAAD,UACE,UAAC,KAAD,CAAU,MAAO1B,EAAjB,SACE,UAAC,KAAD,UACE,UAAC,WAAD,CAAgB,SAAS,aAAzB,SACE,UAAC,EAAD,YAKR2B,SAASC,cAAc,W,+cCnCzB,GAAMC,GACJ,wEACqC,CAAEC,QAAS,IAA5CA,EADJ,EACIA,QADJ,kDAYA,uHAASC,SAAT,EAASA,IAAKC,EAAd,EAAcA,OAAQC,EAAtB,EAAsBA,KAAMC,EAA5B,EAA4BA,sBAA5B,kBAEyBC,IAAM,CAAEJ,IAAKD,EAAUC,EAAKC,SAAQC,aAF7D,GAEUG,SAFV,yBAGW,CAAEH,KAAMG,EAAOH,WAH1B,mCAKUI,EALV,KAMQH,GACFI,MAAK,MAACD,EAAME,YAAP,qBAAC,EAAgBN,QAAjB,wBAAC,EAAsBO,WAAvB,mBAAkC,qBAP7C,kBAUW,CACLH,MAAO,CAAEI,OAAM,GAAEJ,EAAME,YAAR,wBAAE,EAAgBE,OAAQR,KAAI,GAAEI,EAAME,YAAR,wBAAE,EAAgBN,YAXrE,mDAZA,uDA4BWnC,EAAgB4C,SAAU,CACrCC,YAAa,gBACbC,UAAWf,EAAe,CACxBC,QAAS,wBAEXe,UAAW,SAACC,EAAD,OAAY,CACrBC,eAAgBD,EAAME,MAAmD,CACvEA,MAAO,iBAAO,CACZjB,IAAK,WAGTkB,cAAeH,EAAME,MAGnB,CACAA,MAAO,iBAAO,CACZjB,IAAK,eAWAmB,EAAQC,SAAY,CAC/BC,KAAM,aACNC,aAAc,CACZC,KAAM,GACNC,QAAS,IAEXC,SAAU,CACRC,QAAS,SAACC,EAAOC,EAA+C,CAC9DD,EAAMJ,KAAOK,EAAOC,UAGxBC,cAAe,UAAM,KAGRJ,EAAYP,EAAMY,QAAlBL,QACf,KAAeP,EAAM5C,U","file":"assets/js/main.bd991f1d.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable global-require */\nimport { configureStore, Middleware } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport helloWorldSlice, { helloWorldAPI } from 'src/pages/hello-world/slice';\n\nconst middlewares: Middleware[] = [helloWorldAPI.middleware];\n\n/* istanbul ignore if */\nif (process.env.NODE_ENV === 'development') {\n  const { createLogger } = require('redux-logger');\n  const logger = createLogger({ collapsed: true });\n  middlewares.push(logger);\n}\n\nconst store = configureStore({\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(middlewares),\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    helloWorld: helloWorldSlice,\n    [helloWorldAPI.reducerPath]: helloWorldAPI.reducer,\n  },\n});\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport HttpApi from 'i18next-http-backend';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { initReactI18next } from 'react-i18next';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport store from 'src/common/store';\n\ni18n\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  .use(HttpApi)\n  .init({\n    debug: true,\n    fallbackLng: 'en',\n    load: 'currentOnly',\n\n    interpolation: {\n      escapeValue: false,\n    },\n\n    backend: {\n      loadPath: '/over-design/locales/{{lng}}/{{ns}}.json',\n    },\n  });\n\nconst HelloWorld = React.lazy(() => import('src/pages/hello-world'));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <React.Suspense fallback=\"Loading...\">\n          <HelloWorld />\n        </React.Suspense>\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { BaseQueryFn, createApi } from '@reduxjs/toolkit/query/react';\nimport axios, { AxiosError, AxiosRequestConfig } from 'axios';\n\n// https://redux-toolkit.js.org/rtk-query/usage/customizing-queries#axios-basequery\nconst axiosBaseQuery =\n  (\n    { baseUrl }: { baseUrl: string } = { baseUrl: '' },\n  ): BaseQueryFn<\n    {\n      url: string;\n      method?: AxiosRequestConfig['method'];\n      data?: AxiosRequestConfig['data'];\n      __disableNotification?: boolean;\n    },\n    unknown,\n    unknown\n  > =>\n  async ({ url, method, data, __disableNotification }) => {\n    try {\n      const result = await axios({ url: baseUrl + url, method, data });\n      return { data: result.data };\n    } catch (axiosError) {\n      const error = axiosError as AxiosError;\n      if (__disableNotification) {\n        alert(error.response?.data?.message ?? 'Operation failed.');\n      }\n\n      return {\n        error: { status: error.response?.status, data: error.response?.data },\n      };\n    }\n  };\n\nexport const helloWorldAPI = createApi({\n  reducerPath: 'helloWorldAPI',\n  baseQuery: axiosBaseQuery({\n    baseUrl: 'https://httpstat.us',\n  }),\n  endpoints: (build) => ({\n    getASuccessAPI: build.query<{ code: number; description: string }, void>({\n      query: () => ({\n        url: '/200',\n      }),\n    }),\n    getAFailedAPI: build.query<\n      { code: number; description: string },\n      { __disableNotification?: boolean }\n    >({\n      query: () => ({\n        url: '/400',\n      }),\n    }),\n  }),\n});\n\nexport interface SliceState {\n  json: Record<string, any>;\n  loading: boolean;\n}\n\nexport const slice = createSlice({\n  name: 'helloWorld',\n  initialState: {\n    json: {},\n    loading: false,\n  } as SliceState,\n  reducers: {\n    setJSON: (state, action: PayloadAction<Record<string, any>>) => {\n      state.json = action.payload;\n    },\n  },\n  extraReducers: () => {},\n});\n\nexport const { setJSON } = slice.actions;\nexport default slice.reducer;\n"],"sourceRoot":""}