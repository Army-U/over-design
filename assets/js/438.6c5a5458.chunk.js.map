{"version":3,"sources":["webpack://example/./src/common/api.tsx","webpack://example/src/pages/hello-world/index.tsx"],"names":["instance","axios","baseURL","error","console","response","data","description","i18next","Promise","reject","interceptors","use","onAPIRejected","navigate","useNavigate","useTranslation","t","useQuery","getASuccessAPIQueryLoading","isLoading","getAFailedAPIQueryLoading","searchString","URLSearchParams","append","Math","random","toString","location","pathname"],"mappings":"oVAGaA,EAAWC,WAAa,CACnCC,QAAS,wBAGX,WAAuBC,EAAmB,WACxCC,eAAQD,MAAR,MAAcA,EAAME,YAApB,qBAAc,EAAgBC,QAA9B,wBAAc,EAAsBC,eAApC,6BAAsDC,OAAU,oBAAhE,MACOC,QAAQC,OAAOP,GAGxBH,EAASW,aAAaN,SAASO,IAAI,SAACP,EAAD,OAA6BA,GAASC,MAAMO,G,cCJhE,YAAsB,OAC7BC,EAAWC,WACjB,EAAcC,UAANC,EAAR,EAAQA,EAER,EAAwDC,eAAS,CAAC,uBAAwB,iBACxFlB,GAAS,IAMP,UAPemB,EAAnB,EAAQC,UAAuCd,EAA/C,EAA+CA,KAU/C,EAAwDY,eAGtD,CAAC,sBAAuB,iBAAMlB,GAAS,IAAI,UAH1BqB,EAAnB,EAAQD,UAAsCjB,EAA9C,EAA8CA,MAK9C,MACE,kBACE,UAAU,UADZ,UAcE,UAAC,IAAD,CACE,MACE,iCACGc,EAAE,uBADL,IAC8B,IAC3BE,EAA6BF,EAAE,WAAa,MAAQX,GAA1B,YAA0BA,EAAMC,iBAKjE,UAAC,IAAD,CACE,MACE,iCACGU,EAAE,sBADL,IAC6B,IAC1BI,EAA4BJ,EAAE,WAAa,MAAQd,GAA1B,SAA0BA,EAAOE,YAAjC,wBAA0BF,EAAiBG,KAAKC,iBAKhF,UAAC,IAAD,CACE,QAAS,UAAM,CACb,GAAMe,GAAe,GAAIC,iBACzBD,EAAaE,OAAO,IAAKC,KAAKC,SAASC,YACvCb,EAASc,SAASC,SAAW,IAAMP,EAAaK,aAElD,UANF,GAOE,MAAO,+BAAGV,EAAE,qB","file":"assets/js/438.6c5a5458.chunk.js","sourcesContent":["import axios, { AxiosError, AxiosResponse } from 'axios';\nimport i18next from 'i18next';\n\nexport const instance = axios.create({\n  baseURL: 'https://httpstat.us',\n});\n\nfunction onAPIRejected(error: AxiosError) {\n  console.error(error.response?.data?.description ?? `${i18next.t('Operation_Failed')}.`);\n  return Promise.reject(error);\n}\n\ninstance.interceptors.response.use((response: AxiosResponse) => response.data, onAPIRejected);\n","import { css } from '@linaria/core';\nimport { Chip } from '@material-ui/core';\nimport type { AxiosError } from 'axios';\nimport { useTranslation } from 'react-i18next';\nimport { useQuery } from 'react-query';\nimport { useNavigate } from 'react-router-dom';\nimport { instance } from 'src/common/api';\n\nexport default function HelloWorld() {\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n\n  const { isLoading: getASuccessAPIQueryLoading, data } = useQuery(['getASuccessAPIQuery'], () =>\n    instance.get<\n      void,\n      {\n        code: number;\n        description: string;\n      }\n    >('/200'),\n  );\n\n  const { isLoading: getAFailedAPIQueryLoading, error } = useQuery<\n    any,\n    AxiosError<{ code: number; description: string }>\n  >(['getAFailedAPIQuery'], () => instance.get('/400'));\n\n  return (\n    <div\n      className={css`\n        height: 100%;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n        font-size: 18px;\n\n        div {\n          margin-bottom: 20px;\n        }\n      `}\n    >\n      <Chip\n        label={\n          <>\n            {t('getASuccessAPIQuery')}:{' '}\n            {getASuccessAPIQueryLoading ? t('Loading') + '...' : data?.description}\n          </>\n        }\n      ></Chip>\n\n      <Chip\n        label={\n          <>\n            {t('getAFailedAPIQuery')}:{' '}\n            {getAFailedAPIQueryLoading ? t('Loading') + '...' : error?.response?.data.description}\n          </>\n        }\n      ></Chip>\n\n      <Chip\n        onClick={() => {\n          const searchString = new URLSearchParams();\n          searchString.append('s', Math.random().toString());\n          navigate(location.pathname + '?' + searchString.toString());\n        }}\n        clickable\n        label={<>{t('useHistory')}</>}\n      />\n    </div>\n  );\n}\n"],"sourceRoot":""}