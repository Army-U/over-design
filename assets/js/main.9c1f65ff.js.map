{"version":3,"sources":["webpack://example/./src/pages/hello-world/slice.tsx","webpack://example/./src/common/store.tsx","webpack://example/src/pages/hello-world/index.tsx","webpack://example/./src/index.tsx"],"names":["getRequest","createAsyncThunk","template","dispatch","fetch","then","res","json","request","setJSON","slice","createSlice","name","initialState","loading","reducers","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","middlewares","store","configureStore","middleware","getDefaultMiddleware","concat","devTools","process","reducer","helloWorld","helloWorldSlice","useAppDispatch","useDispatch","HelloWorld","useSelector","useEffect","className","JSON","ReactDOM","document","querySelector"],"mappings":"giBAQO,IAAMA,GAAaC,QAMxB,aANwC,4CAM1B,WAAOC,EAAP,mGAAmBC,EAAnB,EAAmBA,SAAnB,SACQC,MAAM,gDAAgDC,MAAK,SAACC,GAAD,OAC/EA,EAAIC,UAFQ,OACRC,EADQ,OAIdL,EAASM,EAAQD,IAJH,2CAN0B,yDAa7BE,GAAQC,QAAY,CAC/BC,KAAM,aACNC,aAAc,CACZN,KAAM,GACNO,SAAS,GAEXC,SAAU,CACRN,QAAS,SAACO,EAAOC,GACfD,EAAMT,KAAOU,EAAOC,UAGxBC,cAAe,SAACC,GACdA,EACGC,QAAQrB,EAAWsB,SAAS,SAACN,GAC5BA,EAAMF,SAAU,KAEjBO,QAAQrB,EAAWuB,WAAW,SAACP,GAC9BA,EAAMF,SAAU,KAEjBO,QAAQrB,EAAWwB,UAAU,SAACR,GAC7BA,EAAMF,SAAU,QAKTL,EAAYC,EAAMe,QAAlBhB,QACf,EAAeC,EAAf,QCzCMgB,EAA4B,GAS5BC,GAAQC,QAAe,CAC3BC,WAAY,SAACC,GAAD,OAA0BA,IAAuBC,OAAOL,IACpEM,UAAUC,EACVC,QAAS,CACPC,WAAYC,KAIhB,IAKaC,EAAiB,kBAAMC,W,UCtBrB,SAASC,IACtB,IAAMpC,EAAWkC,IACXF,GAAaK,SAAY,mBAAsBxB,EAArD,cAIA,OAHAyB,gBAAU,WACRtC,EAASH,OACR,CAFHyC,KAIE,gBACEC,UADF,oBAUE,0BAAOP,uBAAoCQ,eAAeR,EAAfQ,UAArC,U,QChBZC,UACE,SAAC,KAAD,CAAUjB,MAAOA,EAAjB,UACE,SAACY,EAAD,MAEFM,SAASC,cAAc,Y","file":"assets/js/main.9c1f65ff.js","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport store from 'src/common/store';\n\nexport interface SliceState {\n  json: Record<string, any>;\n  loading: boolean;\n}\n\nexport const getRequest = createAsyncThunk<\n  void,\n  void,\n  {\n    state: ReturnType<typeof store.getState>;\n  }\n>('getRequest', async (template, { dispatch }) => {\n  const request = await fetch('https://jsonplaceholder.typicode.com/todos/1').then((res) =>\n    res.json(),\n  );\n  dispatch(setJSON(request));\n});\n\nexport const slice = createSlice({\n  name: 'helloWorld',\n  initialState: {\n    json: {},\n    loading: false,\n  } as SliceState,\n  reducers: {\n    setJSON: (state, action: PayloadAction<Record<string, any>>) => {\n      state.json = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getRequest.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(getRequest.fulfilled, (state) => {\n        state.loading = false;\n      })\n      .addCase(getRequest.rejected, (state) => {\n        state.loading = false;\n      });\n  },\n});\n\nexport const { setJSON } = slice.actions;\nexport default slice.reducer;\n","/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable global-require */\nimport { configureStore, Middleware } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport helloWorldSlice from 'src/pages/hello-world/slice';\n\nconst middlewares: Middleware[] = [];\n\n/* istanbul ignore if */\nif (process.env.NODE_ENV === 'development') {\n  const { createLogger } = require('redux-logger');\n  const logger = createLogger({ collapsed: true });\n  middlewares.push(logger);\n}\n\nconst store = configureStore({\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(middlewares),\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    helloWorld: helloWorldSlice,\n  },\n});\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import { css } from '@linaria/core';\nimport { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState, useAppDispatch } from 'src/common/store';\nimport { getRequest } from './slice';\n\nexport default function HelloWorld() {\n  const dispatch = useAppDispatch();\n  const helloWorld = useSelector((state: RootState) => state.helloWorld);\n  useEffect(() => {\n    dispatch(getRequest());\n  }, [dispatch]);\n  return (\n    <pre\n      className={css`\n        width: 100%;\n        height: 100%;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        font-size: 18px;\n      `}\n    >\n      <code>{helloWorld.loading ? 'Loading...' : JSON.stringify(helloWorld.json, null, '  ')}</code>\n    </pre>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from 'src/common/store';\n\nimport HelloWorld from 'src/pages/hello-world';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HelloWorld />\n  </Provider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}